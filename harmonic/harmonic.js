// Generated by CoffeeScript 1.4.0
(function() {

  $(document).ready(function() {
    var Ball, BallSim, canvas, clear_canvas, context, draw_circle, linterp, pix_to_real_x, pix_to_real_y, plot_fn, potential_fn, potential_fn_grad, real_to_pix_x, real_to_pix_y, setup_scene, sim, xmax, xmin, ymax, ymin, _ref, _ref1;
    canvas = $("canvas")[0];
    context = canvas.getContext("2d");
    clear_canvas = function() {
      return context.clearRect(0, 0, canvas.width, canvas.height);
    };
    linterp = function(x0, x1, y0, y1) {
      return function(x) {
        return y0 + (x - x0) * (y1 - y0) / (x1 - x0);
      };
    };
    _ref = [-2, 2], xmin = _ref[0], xmax = _ref[1];
    _ref1 = [0, 4.2], ymin = _ref1[0], ymax = _ref1[1];
    pix_to_real_x = linterp(0, canvas.width, xmin, xmax);
    pix_to_real_y = linterp(canvas.height, 0, ymin, ymax);
    real_to_pix_x = linterp(xmin, xmax, 0, canvas.width);
    real_to_pix_y = linterp(ymin, ymax, canvas.height, 0);
    draw_circle = function(x, y, radius, color) {
      context.beginPath();
      context.arc(real_to_pix_x(x), real_to_pix_y(y), radius, 0, 2 * Math.PI, false);
      context.fillStyle = color;
      return context.fill();
    };
    plot_fn = function(fn) {
      var pix_x, pix_y, x, y, _i, _ref2;
      context.beginPath();
      context.strokeStyle = "black";
      context.moveTo(0, fn(xmin));
      for (pix_x = _i = 1, _ref2 = canvas.width; 1 <= _ref2 ? _i <= _ref2 : _i >= _ref2; pix_x = 1 <= _ref2 ? ++_i : --_i) {
        x = pix_to_real_x(pix_x);
        y = fn(x);
        pix_y = Math.round(real_to_pix_y(y));
        context.lineTo(pix_x, pix_y);
      }
      return context.stroke();
    };
    potential_fn = function(x) {
      return x * x / 2.0;
    };
    potential_fn_grad = function(x) {
      return x;
    };
    setup_scene = function() {
      clear_canvas();
      return plot_fn(potential_fn);
    };
    Ball = (function() {

      function Ball(x, color) {
        this.x = x;
        this.color = color;
        this.amp = x;
        this.vx = 0;
        this.xhistory = new Array;
        this.vxhistory = new Array;
      }

      Ball.prototype.add_to_scene = function() {
        return draw_circle(this.x, potential_fn(this.x), 5, this.color);
      };

      Ball.prototype.update_history = function(t) {
        this.xhistory.push([t, this.x]);
        return this.vxhistory.push([t, this.vx]);
      };

      Ball.prototype.update_analytic = function(t) {
        var freq;
        freq = 1;
        this.x = this.amp * Math.cos(freq * t);
        this.vx = -this.amp * Math.sin(freq * t);
        return this.update_history(t);
      };

      Ball.prototype.update_euler = function(t, dt) {
        this.vx -= dt * potential_fn_grad(this.x);
        this.x += dt * this.vx;
        return this.update_history(t);
      };

      Ball.prototype.update_rk4 = function(t, dt) {
        var k1, k2, k3, k4;
        k1 = -potential_fn_grad(this.x);
        k2 = -potential_fn_grad(this.x + dt * k1 / 2.0);
        k3 = -potential_fn_grad(this.x + dt * k2 / 2.0);
        k4 = -potential_fn_grad(this.x + dt * k3);
        this.vx += dt * (k1 + 2 * k2 + 2 * k3 + k4) / 6.0;
        this.x += dt * this.vx;
        return this.update_history(t);
      };

      return Ball;

    })();
    BallSim = (function() {

      function BallSim() {
        var _this = this;
        this.xplot = $("#xplot")[0];
        this.vxplot = $("#vxplot")[0];
        this.timestep_spinner = $("#timestep")[0];
        $('#startbtn')[0].onclick = function() {
          return _this.start();
        };
        $('#stopbtn')[0].onclick = function() {
          return _this.stop();
        };
        $('#resetbtn')[0].onclick = function() {
          return _this.initialize_state();
        };
        this.running = false;
        this.initialize_state();
        this.update_fn();
        this.start();
      }

      BallSim.prototype.initialize_state = function() {
        this.analytic_ball = new Ball(1.5, "blue");
        this.euler_ball = new Ball(1.5, "green");
        this.rk_ball = new Ball(1.5, "red");
        this.balls = [this.analytic_ball, this.euler_ball, this.rk_ball];
        return this.time = 0;
      };

      BallSim.prototype.update_fn = function() {
        var b, ball, timestep, _i, _len, _ref2;
        console.log(this.xplot, this.timestep_spinner, this.running, this.analytic_ball, this.balls, this.time);
        setup_scene();
        timestep = parseFloat(this.timestep_spinner.value);
        this.analytic_ball.update_analytic(this.time);
        this.euler_ball.update_euler(this.time, timestep);
        this.rk_ball.update_rk4(this.time, timestep);
        _ref2 = this.balls;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          ball = _ref2[_i];
          ball.add_to_scene();
        }
        $.plot(this.xplot, (function() {
          var _j, _len1, _ref3, _results;
          _ref3 = this.balls;
          _results = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            b = _ref3[_j];
            _results.push(b.xhistory);
          }
          return _results;
        }).call(this));
        $.plot(this.vxplot, (function() {
          var _j, _len1, _ref3, _results;
          _ref3 = this.balls;
          _results = [];
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            b = _ref3[_j];
            _results.push(b.vxhistory);
          }
          return _results;
        }).call(this));
        return this.time += timestep;
      };

      BallSim.prototype.start = function() {
        var _this = this;
        if (!this.running) {
          this.timer = setInterval((function() {
            return _this.update_fn();
          }), 50);
          return this.running = true;
        }
      };

      BallSim.prototype.stop = function() {
        clearInterval(this.timer);
        return this.running = false;
      };

      return BallSim;

    })();
    return sim = new BallSim;
  });

}).call(this);
